extends ./../customize/privateLayout

block content

  div.container
    include ./../core/errorMsg.jade
    
    // input variables: 
    //    - plate_ids  (array); 
    //    - Samples    (array of hashes)
    //    - Steps      (array of hashes)
    //    - attributes (array of hashes)

    //- flds = fields || []; 
    //- units = { 'solution_qty' : 'solution_qty_units', 'transfer_qty' : 'transfer_qty_units'};
    - aliases = { 'equipment' : 'Equip', 'solution' : 'Sol' }
    - var input_options2 = ['transfer_qty', 'split', 'solution_qty', 'solution', 'equipment'];

    - var Options = {};
    - Options['transfer_qty'] = 'Indicate amount of sample to be aliquoted / transferred per well';
    - Options['split']        = 'Number of target wells per source well during transfer';
    - Options['solution_qty'] = 'Track quantity of reagent applied during this step (affects final sample volume if baseline units are the same)';
    - Options['solution']     = 'Track id of reagent applied during this step';
    - Options['equipment']    = 'Track id of equipment used during this step';
  
    - var prompt = { desc : "Select to prompt user to complete this step while using user interface (required to track step)" };
    - var transfer = { desc : "Is sample being relocated within this step to a new target container or box location" };
    - var move = { desc : 'Relocate samples to a new box (without changing their tube container)' }
    - var aliquot = { desc : 'Transfer portion of sample to a target well (leaving some sample remaining)' }
    - var transfer = { desc : 'Transfer all (or specified volume) of original sample to the target well(s), and throw out original sample container(s)' }
    - var preprint = { desc : 'Generate empty target container ids in preparation for future transfer/aliquot.  <B>This should always be followed at some point in the same protocol by an Aliquot or Transfer step</B>' }

    - var transfer_types = '<UL><LI><U>Transfer:</U> ' + transfer.desc + '</LI><LI><U>Aliquot:</U> ' + aliquot.desc + '</LI><LI><U>Pre-Print:</U> ' + preprint.desc + '</LI><LI><U>Move:</U> ' + move.desc + "</LI></UL>";
    - var reset_focus = "This determines which samples become the active samples after the transfer.  By default the focus will move to the progeny, but if reset focus is selected, then the active sample focus reverts to the parent plates again.  (presumably the progeny are no longer handled, but simply put away)";

    - attributes = attributes || {}; // {'Thaw_Time' : 'integer' }

    - var xfer_options = ['transfer_qty', 'Split'];
    - var input_options = ['transfer_qty','Split','solution','solution_qty','equipment','location', 'comments'];

    - var configParams = { record: record, payload: session.payload, input_options: input_options};
    - var init = "initialize(" + JSON.stringify(configParams) + ")";


    div(ng-app='myApp')
     div(ng-controller="SharedController")
      div(ng-controller="FancyFormController")
       div(ng-controller="LIMSController")
        div(ng-controller="Protocol_StepController" ng-init="#{init}")
          h3 Protocol Editor 

          form.form-horizontal(role='form' width='100%')
            div.form-group
              label.control-label.col-sm-2(for='name') Name
              div.col-sm-10  
                input.input-lg.form-control#name(type='text' placeholder='Name' ng-model='Record.name' ng-change="reset_input('name')")
              
            div.form-group
              label.control-label.col-sm-2(for='instructions') Instructions
              div.col-sm-10  
                input.input-lg.form-control#instructions(type='text' placeholder='Instructions' ng-model='Record.instructions' ng-change="reset_input('instructions')")

            div.form-group
              label.control-label.col-sm-2(for='step_message') Message
              div.col-sm-10  
                input.input-lg.form-control#step_message(placeholder='Message' ng-model='Record.message' ng-change="reset_input('message')")

            hr

            div.form-group
              label.control-label.col-sm-2.input-lg(for='prompt') Prompt &nbsp;
                a(href='#' onclick="return false;" tooltip='instructions' data-toggle="popover" data-placement="left" data-trigger="focus" title="Description" data-content="#{prompt.desc}")
                     i.fa.fa-question-circle
              div.col-sm-10
                input.input-lg#prompt(type='checkbox' ng-click="reset_input('prompt');" ng-model='Record.prompt')
                  
            div.form-group
              label.control-label.col-sm-2.input-lg(for='repeatable') Repeatable &nbsp;
              div.col-sm-10
                div.checkbox
                  label
                    input.input-lg#repeatable(type='checkbox' ng-click="reset_input('repeatable');" ng-model='Record.repeatable')                  
            hr   
            b
              u 
                h3 Input Options

            each input_option,i in input_options
              - var xfer_only = xfer_options.indexOf(input_option);
              - var xclass = 'form-group'
              if (xfer_only >= 0) 
                - xclass = xclass + ' alert-info';

              div.form-group(class='#{xclass}' style='margin-bottom: 0px' ng-show="#{xfer_only} == -1 || transfer_step")
                label.input-lg.col-sm-2
                    b &nbsp; #{input_option}
                    input(type='hidden' name='inputname#{i}' ng-model="input[#{i}].name" ng-init="input[#{i}].name='#{input_option}'")
                div.col-sm-2
                  input.input-lg(type='checkbox' ng-model='input[#{i}].selected' ng-click="reset_input()")
                      
                div.col-sm-3(ng-show="input[#{i}].selected" style='padding: 3px' )
                  input.input-lg(type='text' placeholder='- Default -' ng-model='input[#{i}].default' ng-change="reset_input()")
                div.col-sm-3(ng-show="input[#{i}].selected"  style='padding: 3px')
                  input.input-lg(type='text' placeholder='- Format -' ng-model='input[#{i}].format' ng-change="reset_input()")
                div.col-sm-2(ng-show="input[#{i}].selected"  style='padding: 3px')
                    input.col-sm-2(id='#{input_option}_mandatory' type='checkbox' ng-model='input[#{i}].required' ng-change="reset_input()")
                    label.col-sm-10()
                      b &nbsp; Mandatory

            hr   
            b
              u 
                h3 Attributes

            div(ng-show="!(attributes['container'].length || attributes['prep'].length)")
              div.col-sm-2 &nbsp;
              div.col-sm-10
                b (no attributes entered during step)

            div(ng-show="attributes['container'].length || attributes['prep'].length")
              div.col-sm-2 Name
              div.col-sm-2 &nbsp;
              div.col-sm-3 Default
              div.col-sm-3 Format
              div.col-sm-2 Mandatory

            hr 
            div(ng-repeat="(type, att_types) in attributes")
              div(ng-repeat="(i, att) in att_types")
                div.form-group(ng-show='att.name')
                  label.input-lg.col-sm-2
                      b &nbsp; {{att.name}}
                  div.col-sm-2
                    input.input-lg(type='checkbox' ng-model="att[att.id]")
                  div.col-sm-3
                    span {{ att.default }}
                  // div.col-sm-3
                    span {{ att.format }}
                  div.col-sm-2
                    div(ng-show="att.mandatory")
                      i.fa.fa-check(style='color: green')
                    div(ng-show="! att.mandatory")
                      i.fa.fa-close(style='color: red')
                  div.col-sm-3
                    button.btn.btn-danger(type='button' ng-click="att = null") Delete            
            
            div.form-group
              div.col-sm-2 &nbsp;
              div.col-sm-10
                b 
                  u 
                    h3.alert.alert-success Add Attributes: 
            div.form-group
              label.input-lg.col-sm-2
                b Sample Attribute: &nbsp;
                a(href='#' onclick="return false;" tooltip='description' data-toggle="popover" data-placement="left" data-trigger="focus" title="Sample Attributes" data-content="Attributes applied to every individual tube" data-html="true")
                  i.fa.fa-question-circle

              div.col-sm-3
                my-dropdown#satt(placeholder="Attribute" list="MenuList['container_attribute']" selected="container_attribute" property="name" ng-init="setup_Menu('container_attribute', 'FK(attribute)', \"Attribute_Class='Plate'\")")
              div.col-sm-3()
                input.input-lg(type='text' placeholder='- Default -' ng-model='container_att_default' ng-change="set_attribute()")
              // div.col-sm-3()
                input.input-lg(type='text' placeholder='- Format -' ng-model='att_format' ng-change="set_attribute()")
              div.col-sm-1
                button.btn.btn-success(ng-click="add_attribute('container')") Add

            div.form-group
              label.input-lg.col-sm-2
                b Prep Attribute: &nbsp;
                a(href='#' onclick="return false;" tooltip='description' data-toggle="popover" data-placement="left" data-trigger="focus" title="Sample Attributes" data-content="Attributes applied to every individual tube" data-html="true")
                  i.fa.fa-question-circle

              div.col-sm-3
                my-dropdown#satt(placeholder="Attribute" list="MenuList['prep_attribute']" selected="prep_attribute" property="name" ng-init="setup_Menu('prep_attribute', 'FK(attribute)', \"Attribute_Class='Prep'\")")
              div.col-sm-3()
                input.input-lg(type='text' placeholder='- Default -' ng-model='prep_att_default' ng-change="reset_input()")
              // div.col-sm-3()
                input.input-lg(type='text' placeholder='- Format -' ng-model='prep_att_format' ng-change="reset_input()")
              div.col-sm-1
                button.btn.btn-success(ng-click="add_attribute('prep')") Add

              // div.col-sm-2()
                input.col-sm-2(type='checkbox' ng-model='prep_att_required' ng-change="reset_input()")
                label.col-sm-10(for='prep_attribute_mandatory')
                  b &nbsp; Mandatory
            
            hr  

            div.form-group
              label.control-label.col-sm-2.input-lg(for='transfer') Transfer/Move &nbsp;
                a(href='#' onclick="return false;" tooltip='instructions' data-toggle="popover" data-placement="left" data-trigger="focus" title="Description" data-content="#{transfer.desc}")
                     i.fa.fa-question-circle
              div.col-sm-10
                input.input-lg#transfer(type='checkbox' ng-check="reset_custom(); reset_input()" ng-model='transfer_step')    

            div.alert.alert-info(ng-show="transfer_step")
              b 
                u Transfer / Relocate Options
              p &nbsp;
              div.form-group
                label.input-lg.col-sm-2
                  b Type:
                div.col-sm-6
                  my-dropdown#move(placeholder="Type" list="MenuList['transfer_type']" selected="transfer_type" property="name" track='name' ng-init="setup_Menu('transfer_type', 'Move,Transfer,Aliquot,Pre-Print'); filter_catalog();")

                  span &nbsp; &nbsp;
                  a(href='#' onclick="return false;" tooltip='description' data-toggle="popover" data-placement="left" data-trigger="focus" title="Transfer Options" data-content="#{transfer_types}" data-html="true")
                    i.fa.fa-question-circle

              div.form-group(ng-show="transfer_type != 'Move'")
                label.input-lg.col-sm-2
                  b Target:
                div.col-sm-6
                    label
                      my-dropdown.mandatory(placeholder='Container Type' list="MenuList['target_format']" selected='target_format' property='name' ng-init="setup_Menu('target_format','FK(container_format)')")
                div.col-sm-4
                    label
                      my-dropdown(placeholder='Sample Type' list="MenuList['target_sample']" selected='target_sample' property='name' ng-init="setup_Menu('target_sample','FK(sample_type)')")

              // repeat xfer options for custom_settings 
              each xfer_option,i in xfer_options
                div.form-group(ng-show="transfer_type != 'Move'") 
                  //  && ! input[#{i}].selected
                  label.input-lg.col-sm-2
                      b &nbsp; #{xfer_option}
                  div.col-sm-4
                    input.input-lg(type='checkbox' ng-model='input.#{xfer_option}' ng-change="reset_input()")
                        
                  div.col-sm-6(ng-show="input.#{xfer_option}")
                    input.input-lg(type='text' placeholder='- Default -' ng-model='default.#{xfer_option}' ng-change="reset_input()")
              
              div.form-group
                label.input-lg.col-sm-2
                  b &nbsp; Reset_Focus &nbsp;
                  a(href='#' onclick="return false;" tooltip='description' data-toggle="popover" data-placement="left" data-trigger="focus" title="Reset_Focus" data-content="#{transfer_types}" data-html="true")
                    i.fa.fa-question-circle
                div.col-sm-2
                  input.input-lg(type='checkbox' ng-change="reset_custom()" ng-model='reset_focus')
            div.form-group
              div.col-sm-2
              div.col-sm-6
                div(ng-show="action === 'edit'")
                  button.btn.btn-primary.form-control(type='button' ng-click="save()") Update
                div(ng-show="action !== 'edit'")
                  button.btn.btn-primary.form-control(type='button' ng-click="save()") Save
              div.col-sm-4 &nbsp;

            p &bbsp;

            div.container.alert-warning
              p &nbsp;
              b
                u 
                  h4 Custom Formatted Fields (not editable)
              p &nbsp;
              button(type='button' ng-click="reset_originals()") Reset

              div.form-group
                label.control-label.col-sm-2(for='input_options') Input
                div.col-sm-10  
                  input.input-lg.form-control#input_options(placeholder='Input' ng-model='Record.input_options' disabled)

              div.form-group
                label.control-label.col-sm-2(for='input_format') Format              
                div.col-sm-10  
                  input.input-lg.form-control#input_format(placeholder='Format' ng-model='Record.input_format' disabled)

              div.form-group                  
                label.control-label.col-sm-2(for='input_defaults') Defaults
                div.col-sm-10  
                  input.input-lg.form-control#input_defaults(placeholder='Defaults' ng-model='Record.input_defaults' disabled)

              div.form-group
                label.control-label.col-sm-2(for='custom_settings') Custom_Settings
                div.col-sm-10  
                  input.input-lg.form-control#custom_settings(placeholder="Custom" ng-model='Record.custom_settings' disabled)

            hr

          if debug || 1
            div.alert-danger
              hr
              h3 Direct
              b #{ JSON.stringify(record) }



              h3 Angular
              b Record: {{ JSON.stringify(record) }}
              b sails.config.payload: #{ JSON.stringify(sails.config.payload) }
              b session.payload #{ JSON.stringify(session.payload) }